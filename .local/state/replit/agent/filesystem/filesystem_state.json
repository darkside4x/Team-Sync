{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in-up\": {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(30px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"float\": {\n          \"0%, 100%\": {\n            transform: \"translateY(0px)\",\n          },\n          \"50%\": {\n            transform: \"translateY(-10px)\",\n          },\n        },\n        \"pulse-glow\": {\n          \"0%, 100%\": {\n            boxShadow: \"0 0 20px rgba(59, 130, 246, 0.3)\",\n          },\n          \"50%\": {\n            boxShadow: \"0 0 40px rgba(59, 130, 246, 0.6)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in-up\": \"fade-in-up 0.6s ease-out\",\n        \"float\": \"float 6s ease-in-out infinite\",\n        \"pulse-glow\": \"pulse-glow 2s ease-in-out infinite\",\n      },\n      backdropBlur: {\n        xs: \"2px\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3602},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport session from \"express-session\";\nimport passport from \"passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertTeamSchema, insertTeamRequestSchema, insertMessageSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Configure session\nconst sessionConfig = {\n  secret: process.env.SESSION_SECRET || \"your-secret-key\",\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === \"production\",\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n};\n\n// Configure Google OAuth\npassport.use(new GoogleStrategy({\n  clientID: process.env.GOOGLE_CLIENT_ID || \"\",\n  clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n  callbackURL: \"/api/auth/google/callback\"\n}, async (accessToken, refreshToken, profile, done) => {\n  try {\n    const email = profile.emails?.[0]?.value;\n    if (!email) return done(new Error(\"No email found\"), undefined);\n\n    // Check if domain is allowed (not gmail.com)\n    const domain = email.split('@')[1];\n    if (domain === 'gmail.com') {\n      return done(new Error(\"Gmail accounts are not allowed. Please use your institutional email.\"), undefined);\n    }\n\n    // Check if user exists\n    let user = await storage.getUserByGoogleId(profile.id);\n    \n    if (!user) {\n      // Create new user\n      user = await storage.createUser({\n        googleId: profile.id,\n        email: email,\n        name: profile.displayName || \"\",\n        avatar: profile.photos?.[0]?.value,\n        university: domain.includes('vit') ? 'VIT University' : domain.split('.')[0].toUpperCase(),\n        isProfileComplete: false\n      });\n    }\n\n    return done(null, user);\n  } catch (error) {\n    return done(error, undefined);\n  }\n}));\n\npassport.serializeUser((user: any, done) => {\n  done(null, user.id);\n});\n\npassport.deserializeUser(async (id: string, done) => {\n  try {\n    const user = await storage.getUser(id);\n    done(null, user);\n  } catch (error) {\n    done(error, null);\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.use(session(sessionConfig));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Auth routes\n  app.get(\"/api/auth/google\", passport.authenticate(\"google\", {\n    scope: [\"profile\", \"email\"]\n  }));\n\n  app.get(\"/api/auth/google/callback\", \n    passport.authenticate(\"google\", { failureRedirect: \"/?error=auth_failed\" }),\n    (req, res) => {\n      const user = req.user as any;\n      if (!user.isProfileComplete) {\n        res.redirect(\"/profile\");\n      } else {\n        res.redirect(\"/dashboard\");\n      }\n    }\n  );\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.logout(() => {\n      res.json({ success: true });\n    });\n  });\n\n  app.get(\"/api/auth/me\", (req, res) => {\n    if (req.user) {\n      res.json(req.user);\n    } else {\n      res.status(401).json({ error: \"Not authenticated\" });\n    }\n  });\n\n  // User routes\n  app.post(\"/api/users/profile\", async (req, res) => {\n    if (!req.user) return res.status(401).json({ error: \"Not authenticated\" });\n    \n    try {\n      const userData = insertUserSchema.partial().parse(req.body);\n      const updatedUser = await storage.updateUser((req.user as any).id, {\n        ...userData,\n        isProfileComplete: true\n      });\n      res.json(updatedUser);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid data\" });\n    }\n  });\n\n  app.get(\"/api/users\", async (req, res) => {\n    if (!req.user) return res.status(401).json({ error: \"Not authenticated\" });\n    \n    try {\n      const users = await storage.getAllUsers();\n      res.json(users.map(user => ({\n        id: user.id,\n        name: user.name,\n        username: user.username,\n        avatar: user.avatar,\n        university: user.university,\n        department: user.department,\n        skills: user.skills,\n        bio: user.bio\n      })));\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get(\"/api/users/username/:username\", async (req, res) => {\n    try {\n      const user = await storage.getUserByUsername(req.params.username);\n      res.json({ available: !user });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to check username\" });\n    }\n  });\n\n  // Team routes\n  app.get(\"/api/teams\", async (req, res) => {\n    if (!req.user) return res.status(401).json({ error: \"Not authenticated\" });\n    \n    try {\n      const { category } = req.query;\n      let teams;\n      \n      if (category && typeof category === 'string') {\n        teams = await storage.getTeamsByCategory(category);\n      } else {\n        teams = await storage.getRecommendedTeams((req.user as any).id);\n      }\n      \n      res.json(teams);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch teams\" });\n    }\n  });\n\n  app.get(\"/api/teams/my\", async (req, res) => {\n    if (!req.user) return res.status(401).json({ error: \"Not authenticated\" });\n    \n    try {\n      const teams = await storage.getTeamsByUser((req.user as any).id);\n      res.json(teams);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch user teams\" });\n    }\n  });\n\n  app.post(\"/api/teams\", async (req, res) => {\n    if (!req.user) return res.status(401).json({ error: \"Not authenticated\" });\n    \n    try {\n      const teamData = insertTeamSchema.parse({\n        ...req.body,\n        leaderId: (req.user as any).id\n      });\n      const team = await storage.createTeam(teamData);\n      res.json(team);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid data\" });\n    }\n  });\n\n  app.get(\"/api/teams/:id\", async (req, res) => {\n    if (!req.user) return res.status(401).json({ error: \"Not authenticated\" });\n    \n    try {\n      const team = await storage.getTeam(req.params.id);\n      if (!team) return res.status(404).json({ error: \"Team not found\" });\n      \n      const members = await storage.getTeamMembers(team.id);\n      res.json({ ...team, members });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch team\" });\n    }\n  });\n\n  // Team request routes\n  app.post(\"/api/teams/:id/join\", async (req, res) => {\n    if (!req.user) return res.status(401).json({ error: \"Not authenticated\" });\n    \n    try {\n      const requestData = insertTeamRequestSchema.parse({\n        teamId: req.params.id,\n        userId: (req.user as any).id,\n        message: req.body.message\n      });\n      const request = await storage.createTeamRequest(requestData);\n      res.json(request);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid data\" });\n    }\n  });\n\n  app.get(\"/api/teams/:id/requests\", async (req, res) => {\n    if (!req.user) return res.status(401).json({ error: \"Not authenticated\" });\n    \n    try {\n      const team = await storage.getTeam(req.params.id);\n      if (!team) return res.status(404).json({ error: \"Team not found\" });\n      if (team.leaderId !== (req.user as any).id) {\n        return res.status(403).json({ error: \"Not authorized\" });\n      }\n      \n      const requests = await storage.getTeamRequests(req.params.id);\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch requests\" });\n    }\n  });\n\n  app.put(\"/api/team-requests/:id\", async (req, res) => {\n    if (!req.user) return res.status(401).json({ error: \"Not authenticated\" });\n    \n    try {\n      const { status } = z.object({ status: z.enum([\"approved\", \"rejected\"]) }).parse(req.body);\n      const request = await storage.updateTeamRequest(req.params.id, status);\n      \n      // If approved, add user to team\n      if (status === \"approved\") {\n        await storage.addTeamMember({\n          teamId: request.teamId,\n          userId: request.userId,\n          status: \"approved\",\n          role: \"member\"\n        });\n      }\n      \n      res.json(request);\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid data\" });\n    }\n  });\n\n  // Message routes\n  app.get(\"/api/teams/:id/messages\", async (req, res) => {\n    if (!req.user) return res.status(401).json({ error: \"Not authenticated\" });\n    \n    try {\n      // Check if user is a member of the team\n      const members = await storage.getTeamMembers(req.params.id);\n      const isMember = members.some(member => member.userId === (req.user as any).id && member.status === \"approved\");\n      \n      if (!isMember) {\n        return res.status(403).json({ error: \"Not a team member\" });\n      }\n      \n      const messages = await storage.getMessages(req.params.id);\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch messages\" });\n    }\n  });\n\n  // Events routes\n  app.get(\"/api/events\", async (req, res) => {\n    try {\n      const events = await storage.getActiveEvents();\n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch events\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // WebSocket setup for real-time chat\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  wss.on('connection', (ws: WebSocket, req) => {\n    console.log('New WebSocket connection');\n    \n    ws.on('message', async (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'chat_message') {\n          // Save message to database\n          const savedMessage = await storage.createMessage(insertMessageSchema.parse({\n            teamId: message.teamId,\n            userId: message.userId,\n            content: message.content\n          }));\n          \n          // Broadcast to all connected clients\n          wss.clients.forEach((client) => {\n            if (client.readyState === WebSocket.OPEN) {\n              client.send(JSON.stringify({\n                type: 'chat_message',\n                message: savedMessage\n              }));\n            }\n          });\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n    \n    ws.on('close', () => {\n      console.log('WebSocket connection closed');\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":10437},"server/storage.ts":{"content":"import { \n  users, teams, teamMembers, teamRequests, messages, events,\n  type User, type InsertUser, type Team, type InsertTeam, \n  type TeamMember, type InsertTeamMember, type TeamRequest, type InsertTeamRequest,\n  type Message, type InsertMessage, type Event, type InsertEvent\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, or, ilike, not, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByGoogleId(googleId: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  \n  // Team methods\n  getTeam(id: string): Promise<Team | undefined>;\n  getTeamsByUser(userId: string): Promise<Team[]>;\n  getTeamsByCategory(category: string): Promise<Team[]>;\n  getRecommendedTeams(userId: string): Promise<Team[]>;\n  createTeam(team: InsertTeam): Promise<Team>;\n  updateTeam(id: string, team: Partial<InsertTeam>): Promise<Team>;\n  \n  // Team member methods\n  getTeamMembers(teamId: string): Promise<TeamMember[]>;\n  getTeamMembersByUser(userId: string): Promise<TeamMember[]>;\n  addTeamMember(member: InsertTeamMember): Promise<TeamMember>;\n  updateTeamMember(teamId: string, userId: string, status: string): Promise<TeamMember>;\n  removeTeamMember(teamId: string, userId: string): Promise<void>;\n  \n  // Team request methods\n  getTeamRequests(teamId: string): Promise<TeamRequest[]>;\n  getTeamRequestsByUser(userId: string): Promise<TeamRequest[]>;\n  createTeamRequest(request: InsertTeamRequest): Promise<TeamRequest>;\n  updateTeamRequest(id: string, status: string): Promise<TeamRequest>;\n  \n  // Message methods\n  getMessages(teamId: string): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  \n  // Event methods\n  getAllEvents(): Promise<Event[]>;\n  getActiveEvents(): Promise<Event[]>;\n  createEvent(event: InsertEvent): Promise<Event>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async getUserByGoogleId(googleId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.googleId, googleId));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, insertUser: Partial<InsertUser>): Promise<User> {\n    const [user] = await db.update(users).set({\n      ...insertUser,\n      updatedAt: new Date()\n    }).where(eq(users.id, id)).returning();\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  // Team methods\n  async getTeam(id: string): Promise<Team | undefined> {\n    const [team] = await db.select().from(teams).where(eq(teams.id, id));\n    return team || undefined;\n  }\n\n  async getTeamsByUser(userId: string): Promise<Team[]> {\n    return await db.select({\n      id: teams.id,\n      name: teams.name,\n      description: teams.description,\n      leaderId: teams.leaderId,\n      maxMembers: teams.maxMembers,\n      requiredSkills: teams.requiredSkills,\n      category: teams.category,\n      eventName: teams.eventName,\n      deadline: teams.deadline,\n      isActive: teams.isActive,\n      createdAt: teams.createdAt,\n      updatedAt: teams.updatedAt,\n    })\n    .from(teams)\n    .innerJoin(teamMembers, eq(teams.id, teamMembers.teamId))\n    .where(and(eq(teamMembers.userId, userId), eq(teamMembers.status, \"approved\")));\n  }\n\n  async getTeamsByCategory(category: string): Promise<Team[]> {\n    return await db.select().from(teams).where(and(eq(teams.category, category), eq(teams.isActive, true)));\n  }\n\n  async getRecommendedTeams(userId: string): Promise<Team[]> {\n    // For now, return all active teams that the user is not already a member of\n    const userTeams = await this.getTeamsByUser(userId);\n    const userTeamIds = userTeams.map(team => team.id);\n    \n    if (userTeamIds.length > 0) {\n      return await db.select().from(teams).where(\n        and(\n          eq(teams.isActive, true),\n          not(inArray(teams.id, userTeamIds))\n        )\n      );\n    } else {\n      return await db.select().from(teams).where(eq(teams.isActive, true));\n    }\n  }\n\n  async createTeam(insertTeam: InsertTeam): Promise<Team> {\n    const [team] = await db.insert(teams).values(insertTeam).returning();\n    \n    // Add the creator as the team leader\n    await this.addTeamMember({\n      teamId: team.id,\n      userId: team.leaderId,\n      status: \"approved\",\n      role: \"leader\"\n    });\n    \n    return team;\n  }\n\n  async updateTeam(id: string, insertTeam: Partial<InsertTeam>): Promise<Team> {\n    const [team] = await db.update(teams).set({\n      ...insertTeam,\n      updatedAt: new Date()\n    }).where(eq(teams.id, id)).returning();\n    return team;\n  }\n\n  // Team member methods\n  async getTeamMembers(teamId: string): Promise<TeamMember[]> {\n    return await db.select().from(teamMembers).where(eq(teamMembers.teamId, teamId));\n  }\n\n  async getTeamMembersByUser(userId: string): Promise<TeamMember[]> {\n    return await db.select().from(teamMembers).where(eq(teamMembers.userId, userId));\n  }\n\n  async addTeamMember(member: InsertTeamMember): Promise<TeamMember> {\n    const [teamMember] = await db.insert(teamMembers).values(member).returning();\n    return teamMember;\n  }\n\n  async updateTeamMember(teamId: string, userId: string, status: string): Promise<TeamMember> {\n    const [teamMember] = await db.update(teamMembers).set({ status })\n      .where(and(eq(teamMembers.teamId, teamId), eq(teamMembers.userId, userId)))\n      .returning();\n    return teamMember;\n  }\n\n  async removeTeamMember(teamId: string, userId: string): Promise<void> {\n    await db.delete(teamMembers)\n      .where(and(eq(teamMembers.teamId, teamId), eq(teamMembers.userId, userId)));\n  }\n\n  // Team request methods\n  async getTeamRequests(teamId: string): Promise<TeamRequest[]> {\n    return await db.select().from(teamRequests).where(eq(teamRequests.teamId, teamId));\n  }\n\n  async getTeamRequestsByUser(userId: string): Promise<TeamRequest[]> {\n    return await db.select().from(teamRequests).where(eq(teamRequests.userId, userId));\n  }\n\n  async createTeamRequest(request: InsertTeamRequest): Promise<TeamRequest> {\n    const [teamRequest] = await db.insert(teamRequests).values(request).returning();\n    return teamRequest;\n  }\n\n  async updateTeamRequest(id: string, status: string): Promise<TeamRequest> {\n    const [teamRequest] = await db.update(teamRequests).set({ status })\n      .where(eq(teamRequests.id, id)).returning();\n    return teamRequest;\n  }\n\n  // Message methods\n  async getMessages(teamId: string): Promise<Message[]> {\n    return await db.select().from(messages)\n      .where(eq(messages.teamId, teamId))\n      .orderBy(desc(messages.createdAt));\n  }\n\n  async createMessage(message: InsertMessage): Promise<Message> {\n    const [msg] = await db.insert(messages).values(message).returning();\n    return msg;\n  }\n\n  // Event methods\n  async getAllEvents(): Promise<Event[]> {\n    return await db.select().from(events).orderBy(desc(events.startDate));\n  }\n\n  async getActiveEvents(): Promise<Event[]> {\n    return await db.select().from(events)\n      .where(eq(events.isActive, true))\n      .orderBy(desc(events.startDate));\n  }\n\n  async createEvent(event: InsertEvent): Promise<Event> {\n    const [evt] = await db.insert(events).values(event).returning();\n    return evt;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8265},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  googleId: text(\"google_id\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  username: text(\"username\").unique(),\n  name: text(\"name\").notNull(),\n  avatar: text(\"avatar\"),\n  university: text(\"university\"),\n  department: text(\"department\"),\n  age: integer(\"age\"),\n  gender: text(\"gender\"),\n  bio: text(\"bio\"),\n  socialLinks: jsonb(\"social_links\"),\n  achievements: jsonb(\"achievements\"),\n  skills: jsonb(\"skills\"),\n  interests: jsonb(\"interests\"),\n  isProfileComplete: boolean(\"is_profile_complete\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const teams = pgTable(\"teams\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  leaderId: varchar(\"leader_id\").notNull().references(() => users.id),\n  maxMembers: integer(\"max_members\").default(4),\n  requiredSkills: jsonb(\"required_skills\"),\n  category: text(\"category\"), // hackathon, competition, research, symposium\n  eventName: text(\"event_name\"),\n  deadline: timestamp(\"deadline\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const teamMembers = pgTable(\"team_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teamId: varchar(\"team_id\").notNull().references(() => teams.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  status: text(\"status\").default(\"pending\"), // pending, approved, rejected\n  role: text(\"role\").default(\"member\"), // leader, member\n  joinedAt: timestamp(\"joined_at\").defaultNow(),\n});\n\nexport const teamRequests = pgTable(\"team_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teamId: varchar(\"team_id\").notNull().references(() => teams.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  message: text(\"message\"),\n  status: text(\"status\").default(\"pending\"), // pending, approved, rejected\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teamId: varchar(\"team_id\").notNull().references(() => teams.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const events = pgTable(\"events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\"), // hackathon, competition, research, symposium\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  registrationDeadline: timestamp(\"registration_deadline\"),\n  organizer: text(\"organizer\"),\n  website: text(\"website\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  teamsLed: many(teams),\n  teamMemberships: many(teamMembers),\n  teamRequests: many(teamRequests),\n  messages: many(messages),\n}));\n\nexport const teamsRelations = relations(teams, ({ one, many }) => ({\n  leader: one(users, {\n    fields: [teams.leaderId],\n    references: [users.id],\n  }),\n  members: many(teamMembers),\n  requests: many(teamRequests),\n  messages: many(messages),\n}));\n\nexport const teamMembersRelations = relations(teamMembers, ({ one }) => ({\n  team: one(teams, {\n    fields: [teamMembers.teamId],\n    references: [teams.id],\n  }),\n  user: one(users, {\n    fields: [teamMembers.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const teamRequestsRelations = relations(teamRequests, ({ one }) => ({\n  team: one(teams, {\n    fields: [teamRequests.teamId],\n    references: [teams.id],\n  }),\n  user: one(users, {\n    fields: [teamRequests.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  team: one(teams, {\n    fields: [messages.teamId],\n    references: [teams.id],\n  }),\n  user: one(users, {\n    fields: [messages.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTeamSchema = createInsertSchema(teams).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTeamMemberSchema = createInsertSchema(teamMembers).omit({\n  id: true,\n  joinedAt: true,\n});\n\nexport const insertTeamRequestSchema = createInsertSchema(teamRequests).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertTeam = z.infer<typeof insertTeamSchema>;\nexport type Team = typeof teams.$inferSelect;\n\nexport type InsertTeamMember = z.infer<typeof insertTeamMemberSchema>;\nexport type TeamMember = typeof teamMembers.$inferSelect;\n\nexport type InsertTeamRequest = z.infer<typeof insertTeamRequestSchema>;\nexport type TeamRequest = typeof teamRequests.$inferSelect;\n\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\n\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type Event = typeof events.$inferSelect;\n","size_bytes":6161},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Navbar } from \"@/components/navbar\";\n\n// Pages\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Profile from \"@/pages/profile\";\nimport Teams from \"@/pages/teams\";\nimport Chat from \"@/pages/chat\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/teams\" component={Teams} />\n      <Route path=\"/chat\" component={Chat} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background\">\n          <Navbar />\n          <Router />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1237},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222, 17%, 12%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 17%, 12%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 17%, 12%);\n  --primary: hsl(214, 78%, 58%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 40%, 95%);\n  --secondary-foreground: hsl(222, 17%, 12%);\n  --muted: hsl(210, 40%, 95%);\n  --muted-foreground: hsl(215, 25%, 45%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(214, 78%, 58%);\n  --chart-1: hsl(214, 78%, 58%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(280, 100%, 70%);\n  --chart-4: hsl(45, 100%, 55%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222, 17%, 12%);\n  --sidebar-primary: hsl(214, 78%, 58%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 40%, 95%);\n  --sidebar-accent-foreground: hsl(214, 78%, 58%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(214, 78%, 58%);\n  --font-sans: 'Inter', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n  --font-serif: ui-serif, Georgia, Cambria, \"Times New Roman\", Times, serif;\n  --font-mono: ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, \"Liberation Mono\", Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(214, 32%, 91%);\n  --shadow-xs: 0px 1px 2px 0px hsl(214, 32%, 91%);\n  --shadow-sm: 0px 1px 3px 0px hsl(214, 32%, 91%), 0px 1px 2px -1px hsl(214, 32%, 91%);\n  --shadow: 0px 1px 3px 0px hsl(214, 32%, 91%), 0px 1px 2px -1px hsl(214, 32%, 91%);\n  --shadow-md: 0px 4px 6px -1px hsl(214, 32%, 91%), 0px 2px 4px -2px hsl(214, 32%, 91%);\n  --shadow-lg: 0px 10px 15px -3px hsl(214, 32%, 91%), 0px 4px 6px -4px hsl(214, 32%, 91%);\n  --shadow-xl: 0px 20px 25px -5px hsl(214, 32%, 91%), 0px 8px 10px -6px hsl(214, 32%, 91%);\n  --shadow-2xl: 0px 25px 50px -12px hsl(214, 32%, 91%);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 4%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 6%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 4%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(214, 78%, 58%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(222, 47%, 11%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(214, 78%, 58%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n}\n\n.sidebar-transition {\n  transition: all 0.3s ease-in-out;\n}\n\n.hover-lift {\n  transition: transform 0.2s ease-in-out;\n}\n\n.hover-lift:hover {\n  transform: translateY(-2px);\n}\n\n.skill-tag {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--accent)) 100%);\n}\n\n.bg-grid-pattern {\n  background-image: \n    linear-gradient(rgba(0, 0, 0, 0.1) 1px, transparent 1px),\n    linear-gradient(90deg, rgba(0, 0, 0, 0.1) 1px, transparent 1px);\n  background-size: 20px 20px;\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-fadeInUp {\n  animation: fadeInUp 0.6s ease-out;\n}\n\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n","size_bytes":4137},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/create-team-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { CalendarIcon, Plus, X } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst createTeamSchema = z.object({\n  name: z.string().min(3, \"Team name must be at least 3 characters\").max(50),\n  description: z.string().max(500, \"Description must be less than 500 characters\").optional(),\n  category: z.string().min(1, \"Please select a category\"),\n  eventName: z.string().optional(),\n  maxMembers: z.number().min(2).max(10),\n  deadline: z.date().optional(),\n  requiredSkills: z.array(z.string()).optional()\n});\n\ntype CreateTeamFormData = z.infer<typeof createTeamSchema>;\n\nconst CATEGORIES = [\n  { value: \"hackathon\", label: \"Hackathon\" },\n  { value: \"competition\", label: \"Competition\" },\n  { value: \"research\", label: \"Research Project\" },\n  { value: \"symposium\", label: \"Symposium\" }\n];\n\nconst SKILL_SUGGESTIONS = [\n  \"JavaScript\", \"Python\", \"React\", \"Node.js\", \"Java\", \"C++\", \"Machine Learning\",\n  \"UI/UX Design\", \"Data Science\", \"Blockchain\", \"Mobile Development\", \"DevOps\",\n  \"Cybersecurity\", \"Cloud Computing\", \"Artificial Intelligence\"\n];\n\ninterface CreateTeamModalProps {\n  children: React.ReactNode;\n}\n\nexport function CreateTeamModal({ children }: CreateTeamModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [open, setOpen] = useState(false);\n  const [skills, setSkills] = useState<string[]>([]);\n  const [newSkill, setNewSkill] = useState(\"\");\n\n  const form = useForm<CreateTeamFormData>({\n    resolver: zodResolver(createTeamSchema),\n    defaultValues: {\n      maxMembers: 4,\n      requiredSkills: []\n    }\n  });\n\n  const createTeamMutation = useMutation({\n    mutationFn: (data: CreateTeamFormData) => {\n      const payload = {\n        ...data,\n        requiredSkills: skills,\n        deadline: data.deadline?.toISOString()\n      };\n      return apiRequest(\"POST\", \"/api/teams\", payload);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Team created successfully!\",\n        description: \"Your team has been created and you've been added as the leader.\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/teams\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/teams/my\"] });\n      setOpen(false);\n      form.reset();\n      setSkills([]);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error creating team\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const addSkill = () => {\n    if (newSkill.trim() && !skills.includes(newSkill.trim())) {\n      setSkills([...skills, newSkill.trim()]);\n      setNewSkill(\"\");\n    }\n  };\n\n  const removeSkill = (skill: string) => {\n    setSkills(skills.filter(s => s !== skill));\n  };\n\n  const handleSubmit = (data: CreateTeamFormData) => {\n    createTeamMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {children}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Create New Team</DialogTitle>\n          <DialogDescription>\n            Create a team for your next project, hackathon, or competition. Fill in the details below.\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\">Team Name *</Label>\n              <Input\n                id=\"name\"\n                {...form.register(\"name\")}\n                placeholder=\"Enter team name...\"\n                data-testid=\"input-team-name\"\n              />\n              {form.formState.errors.name && (\n                <p className=\"text-sm text-destructive\">{form.formState.errors.name.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Description</Label>\n              <Textarea\n                id=\"description\"\n                {...form.register(\"description\")}\n                placeholder=\"Describe your project and what you're looking to accomplish...\"\n                rows={3}\n                data-testid=\"textarea-team-description\"\n              />\n              {form.formState.errors.description && (\n                <p className=\"text-sm text-destructive\">{form.formState.errors.description.message}</p>\n              )}\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"category\">Category *</Label>\n                <Select onValueChange={(value) => form.setValue(\"category\", value)}>\n                  <SelectTrigger data-testid=\"select-team-category\">\n                    <SelectValue placeholder=\"Select category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {CATEGORIES.map((category) => (\n                      <SelectItem key={category.value} value={category.value}>\n                        {category.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {form.formState.errors.category && (\n                  <p className=\"text-sm text-destructive\">{form.formState.errors.category.message}</p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"maxMembers\">Max Members</Label>\n                <Input\n                  id=\"maxMembers\"\n                  type=\"number\"\n                  min=\"2\"\n                  max=\"10\"\n                  {...form.register(\"maxMembers\", { valueAsNumber: true })}\n                  data-testid=\"input-max-members\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"eventName\">Event/Competition Name</Label>\n              <Input\n                id=\"eventName\"\n                {...form.register(\"eventName\")}\n                placeholder=\"e.g., Smart India Hackathon 2024\"\n                data-testid=\"input-event-name\"\n              />\n            </div>\n\n            <div>\n              <Label>Project Deadline</Label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className={cn(\n                      \"w-full justify-start text-left font-normal\",\n                      !form.watch(\"deadline\") && \"text-muted-foreground\"\n                    )}\n                    data-testid=\"button-select-deadline\"\n                  >\n                    <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                    {form.watch(\"deadline\") ? (\n                      format(form.watch(\"deadline\")!, \"PPP\")\n                    ) : (\n                      <span>Pick a deadline</span>\n                    )}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={form.watch(\"deadline\")}\n                    onSelect={(date) => form.setValue(\"deadline\", date)}\n                    disabled={(date) => date < new Date()}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n            </div>\n\n            <div>\n              <Label>Required Skills</Label>\n              <div className=\"space-y-3\">\n                <div className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Add a required skill...\"\n                    value={newSkill}\n                    onChange={(e) => setNewSkill(e.target.value)}\n                    list=\"skills-suggestions\"\n                    data-testid=\"input-required-skill\"\n                  />\n                  <datalist id=\"skills-suggestions\">\n                    {SKILL_SUGGESTIONS.map((skill) => (\n                      <option key={skill} value={skill} />\n                    ))}\n                  </datalist>\n                  <Button type=\"button\" onClick={addSkill} data-testid=\"button-add-required-skill\">\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n\n                <div className=\"flex flex-wrap gap-2\">\n                  {skills.map((skill) => (\n                    <Badge key={skill} variant=\"secondary\" className=\"flex items-center gap-1\">\n                      {skill}\n                      <X\n                        className=\"h-3 w-3 cursor-pointer\"\n                        onClick={() => removeSkill(skill)}\n                        data-testid={`button-remove-skill-${skill}`}\n                      />\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end gap-3\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setOpen(false)}\n              data-testid=\"button-cancel-create-team\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createTeamMutation.isPending}\n              data-testid=\"button-submit-create-team\"\n            >\n              {createTeamMutation.isPending ? \"Creating...\" : \"Create Team\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":10381},"client/src/components/floating-chat-widget.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MessageCircle, X, Users } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Team } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\nexport function FloatingChatWidget() {\n  const { user, isAuthenticated } = useAuth();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const { data: myTeams = [] } = useQuery<Team[]>({\n    queryKey: [\"/api/teams/my\"],\n    enabled: isAuthenticated\n  });\n\n  if (!isAuthenticated || !user || !user.isProfileComplete) {\n    return null;\n  }\n\n  return (\n    <>\n      {/* Floating Button */}\n      <div className=\"fixed bottom-6 right-6 z-50\">\n        <Button\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"bg-primary text-primary-foreground w-14 h-14 rounded-full shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105\"\n          data-testid=\"button-floating-chat\"\n        >\n          {isOpen ? (\n            <X className=\"h-6 w-6\" />\n          ) : (\n            <div className=\"relative\">\n              <MessageCircle className=\"h-6 w-6\" />\n              {myTeams.length > 0 && (\n                <span className=\"absolute -top-2 -right-2 w-5 h-5 bg-accent text-accent-foreground text-xs rounded-full flex items-center justify-center\">\n                  {myTeams.length}\n                </span>\n              )}\n            </div>\n          )}\n        </Button>\n      </div>\n\n      {/* Quick Chat Panel */}\n      {isOpen && (\n        <div className=\"fixed bottom-24 right-6 z-50 w-80\">\n          <Card className=\"shadow-2xl border-2 border-border/50 backdrop-blur-sm bg-card/95\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <MessageCircle className=\"h-5 w-5\" />\n                Quick Chat\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {myTeams.length > 0 ? (\n                <>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Jump to team conversations:\n                  </p>\n                  <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                    {myTeams.slice(0, 5).map((team) => (\n                      <Button\n                        key={team.id}\n                        variant=\"ghost\"\n                        className=\"w-full justify-start h-auto p-3 text-left\"\n                        asChild\n                        data-testid={`button-quick-chat-${team.id}`}\n                      >\n                        <Link href=\"/chat\" onClick={() => setIsOpen(false)}>\n                          <div className=\"flex items-center gap-3 w-full\">\n                            <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                              <Users className=\"h-4 w-4 text-primary\" />\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <p className=\"font-medium text-sm truncate\">{team.name}</p>\n                              <p className=\"text-xs text-muted-foreground truncate\">\n                                {team.category}\n                              </p>\n                            </div>\n                          </div>\n                        </Link>\n                      </Button>\n                    ))}\n                  </div>\n                  {myTeams.length > 5 && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"w-full\"\n                      asChild\n                      data-testid=\"button-view-all-chats\"\n                    >\n                      <Link href=\"/chat\" onClick={() => setIsOpen(false)}>\n                        View All Chats ({myTeams.length})\n                      </Link>\n                    </Button>\n                  )}\n                </>\n              ) : (\n                <div className=\"text-center py-4\">\n                  <MessageCircle className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    No team chats yet\n                  </p>\n                  <Button size=\"sm\" asChild data-testid=\"button-join-team-from-chat\">\n                    <Link href=\"/teams\" onClick={() => setIsOpen(false)}>\n                      <Users className=\"h-4 w-4 mr-2\" />\n                      Join a Team\n                    </Link>\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Backdrop */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 z-40 bg-black/20 backdrop-blur-sm\"\n          onClick={() => setIsOpen(false)}\n        />\n      )}\n    </>\n  );\n}\n","size_bytes":5100},"client/src/components/navbar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { GOOGLE_AUTH_URL, logout } from \"@/lib/auth\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Link } from \"wouter\";\nimport { Users, LogOut, User, Settings } from \"lucide-react\";\n\nexport function Navbar() {\n  const { user, isAuthenticated } = useAuth();\n\n  return (\n    <nav className=\"bg-card/80 backdrop-blur-md border-b border-border sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n                <Users className=\"text-primary-foreground text-lg\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-foreground\">TeamSync Edu</h1>\n                <p className=\"text-xs text-muted-foreground\">by Team N00B</p>\n              </div>\n            </div>\n          </Link>\n\n          <div className=\"flex items-center space-x-4\">\n            {isAuthenticated && user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"h-10 w-10 rounded-full p-0\">\n                    <Avatar className=\"h-10 w-10\">\n                      <AvatarImage src={user.avatar || \"\"} alt={user.name} />\n                      <AvatarFallback>\n                        {user.name.split(' ').map(n => n[0]).join('').slice(0, 2).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <div className=\"flex items-center justify-start gap-2 p-2\">\n                    <div className=\"flex flex-col space-y-1 leading-none\">\n                      <p className=\"font-medium\">{user.name}</p>\n                      <p className=\"text-xs text-muted-foreground\">{user.email}</p>\n                    </div>\n                  </div>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/profile\" className=\"cursor-pointer\">\n                      <User className=\"mr-2 h-4 w-4\" />\n                      Profile\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/dashboard\" className=\"cursor-pointer\">\n                      <Users className=\"mr-2 h-4 w-4\" />\n                      Dashboard\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <Settings className=\"mr-2 h-4 w-4\" />\n                    Settings\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={logout}>\n                    <LogOut className=\"mr-2 h-4 w-4\" />\n                    Log out\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <Button asChild className=\"bg-primary hover:bg-primary/90\">\n                <a href={GOOGLE_AUTH_URL} data-testid=\"button-login\">\n                  Sign in with Google\n                </a>\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3727},"client/src/components/profile-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { X, Plus } from \"lucide-react\";\nimport { checkUsername } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst profileSchema = z.object({\n  username: z.string().min(3).max(20).regex(/^[a-zA-Z0-9_]+$/, \"Username can only contain letters, numbers, and underscores\"),\n  age: z.number().min(16).max(100),\n  gender: z.string().min(1),\n  department: z.string().min(1),\n  bio: z.string().max(500),\n  socialLinks: z.object({\n    github: z.string().url().optional().or(z.literal(\"\")),\n    linkedin: z.string().url().optional().or(z.literal(\"\")),\n    portfolio: z.string().url().optional().or(z.literal(\"\"))\n  }),\n  achievements: z.array(z.string()).optional(),\n  skills: z.array(z.object({\n    name: z.string(),\n    level: z.number().min(1).max(100)\n  })).optional(),\n  interests: z.array(z.string()).optional()\n});\n\ntype ProfileFormData = z.infer<typeof profileSchema>;\n\nconst SKILL_SUGGESTIONS = [\n  \"JavaScript\", \"Python\", \"React\", \"Node.js\", \"Java\", \"C++\", \"Machine Learning\",\n  \"UI/UX Design\", \"Data Science\", \"Blockchain\", \"Mobile Development\", \"DevOps\",\n  \"Cybersecurity\", \"Cloud Computing\", \"Artificial Intelligence\"\n];\n\nconst DEPARTMENTS = [\n  \"Computer Science\", \"Information Technology\", \"Electronics\", \"Mechanical Engineering\",\n  \"Civil Engineering\", \"Electrical Engineering\", \"Biomedical Engineering\", \"Chemical Engineering\"\n];\n\ninterface ProfileFormProps {\n  onSubmit: (data: ProfileFormData) => void;\n  isLoading?: boolean;\n}\n\nexport function ProfileForm({ onSubmit, isLoading }: ProfileFormProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [skills, setSkills] = useState<Array<{ name: string; level: number }>>([]);\n  const [interests, setInterests] = useState<string[]>([]);\n  const [achievements, setAchievements] = useState<string[]>([]);\n  const [newSkill, setNewSkill] = useState(\"\");\n  const [skillLevel, setSkillLevel] = useState(50);\n  const [newInterest, setNewInterest] = useState(\"\");\n  const [newAchievement, setNewAchievement] = useState(\"\");\n  const [usernameChecking, setUsernameChecking] = useState(false);\n\n  const form = useForm<ProfileFormData>({\n    resolver: zodResolver(profileSchema),\n    defaultValues: {\n      skills: [],\n      interests: [],\n      achievements: [],\n      socialLinks: {\n        github: \"\",\n        linkedin: \"\",\n        portfolio: \"\"\n      }\n    }\n  });\n\n  const updateProfileMutation = useMutation({\n    mutationFn: (data: ProfileFormData) => apiRequest(\"POST\", \"/api/users/profile\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n      toast({\n        title: \"Profile updated successfully!\",\n        description: \"Your profile has been saved.\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error updating profile\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleUsernameBlur = async (username: string) => {\n    if (username.length >= 3) {\n      setUsernameChecking(true);\n      try {\n        const isAvailable = await checkUsername(username);\n        if (!isAvailable) {\n          form.setError(\"username\", { message: \"Username is already taken\" });\n        }\n      } catch (error) {\n        console.error(\"Username check error:\", error);\n      }\n      setUsernameChecking(false);\n    }\n  };\n\n  const addSkill = () => {\n    if (newSkill.trim() && !skills.some(skill => skill.name.toLowerCase() === newSkill.toLowerCase())) {\n      setSkills([...skills, { name: newSkill.trim(), level: skillLevel }]);\n      setNewSkill(\"\");\n      setSkillLevel(50);\n    }\n  };\n\n  const removeSkill = (index: number) => {\n    setSkills(skills.filter((_, i) => i !== index));\n  };\n\n  const addInterest = () => {\n    if (newInterest.trim() && !interests.includes(newInterest.trim())) {\n      setInterests([...interests, newInterest.trim()]);\n      setNewInterest(\"\");\n    }\n  };\n\n  const removeInterest = (interest: string) => {\n    setInterests(interests.filter(i => i !== interest));\n  };\n\n  const addAchievement = () => {\n    if (newAchievement.trim()) {\n      setAchievements([...achievements, newAchievement.trim()]);\n      setNewAchievement(\"\");\n    }\n  };\n\n  const removeAchievement = (index: number) => {\n    setAchievements(achievements.filter((_, i) => i !== index));\n  };\n\n  const handleSubmit = (data: ProfileFormData) => {\n    const formData = {\n      ...data,\n      skills,\n      interests,\n      achievements\n    };\n    updateProfileMutation.mutate(formData);\n    onSubmit(formData);\n  };\n\n  return (\n    <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Basic Information</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"username\">Username *</Label>\n            <Input\n              id=\"username\"\n              {...form.register(\"username\")}\n              onBlur={(e) => handleUsernameBlur(e.target.value)}\n              data-testid=\"input-username\"\n            />\n            {usernameChecking && <p className=\"text-sm text-muted-foreground\">Checking availability...</p>}\n            {form.formState.errors.username && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.username.message}</p>\n            )}\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"age\">Age *</Label>\n              <Input\n                id=\"age\"\n                type=\"number\"\n                {...form.register(\"age\", { valueAsNumber: true })}\n                data-testid=\"input-age\"\n              />\n              {form.formState.errors.age && (\n                <p className=\"text-sm text-destructive\">{form.formState.errors.age.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"gender\">Gender *</Label>\n              <Select onValueChange={(value) => form.setValue(\"gender\", value)}>\n                <SelectTrigger data-testid=\"select-gender\">\n                  <SelectValue placeholder=\"Select gender\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"male\">Male</SelectItem>\n                  <SelectItem value=\"female\">Female</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                  <SelectItem value=\"prefer-not-to-say\">Prefer not to say</SelectItem>\n                </SelectContent>\n              </Select>\n              {form.formState.errors.gender && (\n                <p className=\"text-sm text-destructive\">{form.formState.errors.gender.message}</p>\n              )}\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"department\">Department *</Label>\n            <Select onValueChange={(value) => form.setValue(\"department\", value)}>\n              <SelectTrigger data-testid=\"select-department\">\n                <SelectValue placeholder=\"Select department\" />\n              </SelectTrigger>\n              <SelectContent>\n                {DEPARTMENTS.map((dept) => (\n                  <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {form.formState.errors.department && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.department.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"bio\">Bio</Label>\n            <Textarea\n              id=\"bio\"\n              {...form.register(\"bio\")}\n              placeholder=\"Tell us about yourself...\"\n              data-testid=\"textarea-bio\"\n            />\n            {form.formState.errors.bio && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.bio.message}</p>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Skills</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex gap-2\">\n            <div className=\"flex-1\">\n              <Input\n                placeholder=\"Add a skill...\"\n                value={newSkill}\n                onChange={(e) => setNewSkill(e.target.value)}\n                list=\"skills-suggestions\"\n                data-testid=\"input-new-skill\"\n              />\n              <datalist id=\"skills-suggestions\">\n                {SKILL_SUGGESTIONS.map((skill) => (\n                  <option key={skill} value={skill} />\n                ))}\n              </datalist>\n            </div>\n            <div className=\"w-20\">\n              <Input\n                type=\"number\"\n                min=\"1\"\n                max=\"100\"\n                value={skillLevel}\n                onChange={(e) => setSkillLevel(Number(e.target.value))}\n                placeholder=\"Level\"\n                data-testid=\"input-skill-level\"\n              />\n            </div>\n            <Button type=\"button\" onClick={addSkill} data-testid=\"button-add-skill\">\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          <div className=\"flex flex-wrap gap-2\">\n            {skills.map((skill, index) => (\n              <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                {skill.name} ({skill.level}%)\n                <X\n                  className=\"h-3 w-3 cursor-pointer\"\n                  onClick={() => removeSkill(index)}\n                  data-testid={`button-remove-skill-${index}`}\n                />\n              </Badge>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Interests</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex gap-2\">\n            <Input\n              placeholder=\"Add an interest...\"\n              value={newInterest}\n              onChange={(e) => setNewInterest(e.target.value)}\n              data-testid=\"input-new-interest\"\n            />\n            <Button type=\"button\" onClick={addInterest} data-testid=\"button-add-interest\">\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          <div className=\"flex flex-wrap gap-2\">\n            {interests.map((interest) => (\n              <Badge key={interest} variant=\"outline\" className=\"flex items-center gap-1\">\n                {interest}\n                <X\n                  className=\"h-3 w-3 cursor-pointer\"\n                  onClick={() => removeInterest(interest)}\n                  data-testid={`button-remove-interest-${interest}`}\n                />\n              </Badge>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Social Links</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"github\">GitHub</Label>\n            <Input\n              id=\"github\"\n              {...form.register(\"socialLinks.github\")}\n              placeholder=\"https://github.com/username\"\n              data-testid=\"input-github\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"linkedin\">LinkedIn</Label>\n            <Input\n              id=\"linkedin\"\n              {...form.register(\"socialLinks.linkedin\")}\n              placeholder=\"https://linkedin.com/in/username\"\n              data-testid=\"input-linkedin\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"portfolio\">Portfolio</Label>\n            <Input\n              id=\"portfolio\"\n              {...form.register(\"socialLinks.portfolio\")}\n              placeholder=\"https://yourportfolio.com\"\n              data-testid=\"input-portfolio\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Achievements</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex gap-2\">\n            <Input\n              placeholder=\"Add an achievement...\"\n              value={newAchievement}\n              onChange={(e) => setNewAchievement(e.target.value)}\n              data-testid=\"input-new-achievement\"\n            />\n            <Button type=\"button\" onClick={addAchievement} data-testid=\"button-add-achievement\">\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          <div className=\"space-y-2\">\n            {achievements.map((achievement, index) => (\n              <div key={index} className=\"flex items-center justify-between p-2 bg-muted rounded\">\n                <span className=\"text-sm\">{achievement}</span>\n                <X\n                  className=\"h-4 w-4 cursor-pointer text-muted-foreground hover:text-destructive\"\n                  onClick={() => removeAchievement(index)}\n                  data-testid={`button-remove-achievement-${index}`}\n                />\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Button \n        type=\"submit\" \n        className=\"w-full\" \n        disabled={isLoading || updateProfileMutation.isPending}\n        data-testid=\"button-save-profile\"\n      >\n        {isLoading || updateProfileMutation.isPending ? \"Saving...\" : \"Save Profile\"}\n      </Button>\n    </form>\n  );\n}\n","size_bytes":14101},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Home, \n  Search, \n  Users, \n  MessageCircle, \n  User, \n  Settings,\n  Calendar,\n  Trophy\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: Home },\n  { name: \"Find Teams\", href: \"/teams\", icon: Search },\n  { name: \"My Projects\", href: \"/projects\", icon: Users },\n  { name: \"Messages\", href: \"/chat\", icon: MessageCircle },\n  { name: \"Profile\", href: \"/profile\", icon: User },\n  { name: \"Events\", href: \"/events\", icon: Calendar },\n];\n\nexport function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  if (!user) return null;\n\n  return (\n    <aside className=\"bg-card border-r border-border w-64 flex-shrink-0 sidebar-transition\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center space-x-3 mb-8\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <Users className=\"text-primary-foreground text-lg\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold text-foreground\">TeamSync Edu</h1>\n            <p className=\"text-sm text-muted-foreground\">{user.university}</p>\n          </div>\n        </div>\n\n        <nav className=\"space-y-2\">\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            const Icon = item.icon;\n            \n            return (\n              <Link key={item.name} href={item.href}>\n                <Button\n                  variant={isActive ? \"default\" : \"ghost\"}\n                  className={cn(\n                    \"w-full justify-start\",\n                    isActive && \"bg-primary text-primary-foreground\"\n                  )}\n                  data-testid={`nav-${item.name.toLowerCase().replace(' ', '-')}`}\n                >\n                  <Icon className=\"mr-2 h-4 w-4\" />\n                  {item.name}\n                </Button>\n              </Link>\n            );\n          })}\n        </nav>\n\n        <div className=\"mt-8 pt-6 border-t border-border\">\n          <div className=\"flex items-center space-x-3\">\n            <Avatar className=\"h-10 w-10\">\n              <AvatarImage src={user.avatar || \"\"} alt={user.name} />\n              <AvatarFallback>\n                {user.name.split(' ').map(n => n[0]).join('').slice(0, 2).toUpperCase()}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-foreground truncate\">{user.name}</p>\n              <p className=\"text-xs text-muted-foreground truncate\">{user.email}</p>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\">\n              <Settings className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3034},"client/src/components/skill-tag.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SkillTagProps {\n  skill: string;\n  level?: number;\n  variant?: \"default\" | \"secondary\" | \"outline\" | \"destructive\";\n  className?: string;\n}\n\nexport function SkillTag({ skill, level, variant = \"default\", className }: SkillTagProps) {\n  const getSkillColor = (skillName: string) => {\n    const colors = [\n      \"bg-primary/10 text-primary\",\n      \"bg-accent/10 text-accent\",\n      \"bg-chart-3/10 text-chart-3\", \n      \"bg-chart-4/10 text-chart-4\",\n      \"bg-chart-5/10 text-chart-5\"\n    ];\n    \n    const hash = skillName.split('').reduce((a, b) => {\n      a = ((a << 5) - a) + b.charCodeAt(0);\n      return a & a;\n    }, 0);\n    \n    return colors[Math.abs(hash) % colors.length];\n  };\n\n  return (\n    <Badge \n      variant={variant}\n      className={cn(\n        \"text-xs\",\n        variant === \"default\" && getSkillColor(skill),\n        className\n      )}\n    >\n      {skill}\n      {level && (\n        <span className=\"ml-1 text-xs opacity-75\">\n          {level}%\n        </span>\n      )}\n    </Badge>\n  );\n}\n","size_bytes":1100},"client/src/components/team-card.tsx":{"content":"import { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Users, Clock, Trophy, UserPlus } from \"lucide-react\";\nimport type { Team, User } from \"@shared/schema\";\n\ninterface TeamCardProps {\n  team: Team & { members?: any[], leader?: User };\n  onJoin?: (teamId: string) => void;\n  showJoinButton?: boolean;\n}\n\nexport function TeamCard({ team, onJoin, showJoinButton = true }: TeamCardProps) {\n  const requiredSkills = Array.isArray(team.requiredSkills) ? team.requiredSkills : [];\n  const memberCount = team.members?.length || 1;\n  const daysLeft = team.deadline ? Math.ceil((new Date(team.deadline).getTime() - Date.now()) / (1000 * 60 * 60 * 24)) : null;\n\n  const handleJoin = () => {\n    if (onJoin) {\n      onJoin(team.id);\n    }\n  };\n\n  return (\n    <Card className=\"hover:border-primary/30 transition-all duration-200 hover:shadow-md\">\n      <CardHeader>\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <h3 className=\"font-semibold text-foreground text-lg\">{team.name}</h3>\n              <Badge variant=\"secondary\" className=\"bg-accent text-accent-foreground\">\n                {Math.floor(Math.random() * 20 + 80)}% Match\n              </Badge>\n            </div>\n            <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">{team.description}</p>\n            <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n              <span className=\"flex items-center gap-1\">\n                <Users className=\"h-3 w-3\" />\n                {memberCount}/{team.maxMembers} Members\n              </span>\n              {daysLeft && (\n                <span className=\"flex items-center gap-1\">\n                  <Clock className=\"h-3 w-3\" />\n                  {daysLeft} days left\n                </span>\n              )}\n              {team.eventName && (\n                <span className=\"flex items-center gap-1\">\n                  <Trophy className=\"h-3 w-3\" />\n                  {team.eventName}\n                </span>\n              )}\n            </div>\n          </div>\n          <div className=\"flex -space-x-2\">\n            {team.members?.slice(0, 3).map((member, index) => (\n              <Avatar key={index} className=\"h-8 w-8 border-2 border-card\">\n                <AvatarImage src={member.avatar} />\n                <AvatarFallback className=\"text-xs\">\n                  {member.name?.split(' ').map((n: string) => n[0]).join('').slice(0, 2).toUpperCase()}\n                </AvatarFallback>\n              </Avatar>\n            ))}\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          {requiredSkills.slice(0, 4).map((skill: string, index: number) => (\n            <Badge key={index} variant=\"outline\" className=\"text-xs\">\n              {skill}\n            </Badge>\n          ))}\n          {requiredSkills.length > 4 && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              +{requiredSkills.length - 4} more\n            </Badge>\n          )}\n        </div>\n        {showJoinButton && (\n          <Button \n            className=\"w-full\" \n            onClick={handleJoin}\n            data-testid={`button-join-${team.id}`}\n          >\n            <UserPlus className=\"h-4 w-4 mr-2\" />\n            Request to Join\n          </Button>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3651},"client/src/hooks/use-auth.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const query = useQuery<User | null>({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: async () => {\n      try {\n        const response = await fetch(\"/api/auth/me\", {\n          credentials: \"include\"\n        });\n        if (response.status === 401) {\n          return null;\n        }\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch user\");\n        }\n        return await response.json();\n      } catch (error) {\n        return null;\n      }\n    }\n  });\n\n  return {\n    user: query.data,\n    isLoading: query.isLoading,\n    isAuthenticated: !!query.data,\n    refetch: query.refetch\n  };\n}\n","size_bytes":733},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport type { Message } from \"@shared/schema\";\n\ninterface WebSocketMessage {\n  type: string;\n  teamId?: string;\n  userId?: string;\n  content?: string;\n  message?: Message;\n}\n\nexport function useWebSocket() {\n  const ws = useRef<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([]);\n\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    ws.current = new WebSocket(wsUrl);\n    \n    ws.current.onopen = () => {\n      setIsConnected(true);\n      console.log(\"WebSocket connected\");\n    };\n    \n    ws.current.onmessage = (event) => {\n      try {\n        const data: WebSocketMessage = JSON.parse(event.data);\n        if (data.type === 'chat_message' && data.message) {\n          setMessages(prev => [data.message!, ...prev]);\n        }\n      } catch (error) {\n        console.error(\"WebSocket message error:\", error);\n      }\n    };\n    \n    ws.current.onclose = () => {\n      setIsConnected(false);\n      console.log(\"WebSocket disconnected\");\n    };\n    \n    ws.current.onerror = (error) => {\n      console.error(\"WebSocket error:\", error);\n    };\n\n    return () => {\n      if (ws.current) {\n        ws.current.close();\n      }\n    };\n  }, []);\n\n  const sendMessage = (teamId: string, userId: string, content: string) => {\n    if (ws.current?.readyState === WebSocket.OPEN) {\n      ws.current.send(JSON.stringify({\n        type: 'chat_message',\n        teamId,\n        userId,\n        content\n      }));\n    }\n  };\n\n  return {\n    isConnected,\n    messages,\n    sendMessage,\n    setMessages\n  };\n}\n","size_bytes":1750},"client/src/lib/auth.ts":{"content":"export const GOOGLE_AUTH_URL = \"/api/auth/google\";\n\nexport const logout = async () => {\n  try {\n    await fetch(\"/api/auth/logout\", {\n      method: \"POST\",\n      credentials: \"include\"\n    });\n    window.location.href = \"/\";\n  } catch (error) {\n    console.error(\"Logout error:\", error);\n  }\n};\n\nexport const checkUsername = async (username: string): Promise<boolean> => {\n  try {\n    const response = await fetch(`/api/users/username/${username}`, {\n      credentials: \"include\"\n    });\n    const data = await response.json();\n    return data.available;\n  } catch (error) {\n    console.error(\"Username check error:\", error);\n    return false;\n  }\n};\n","size_bytes":651},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useWebSocket } from \"@/hooks/use-websocket\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Send, Users, MessageCircle } from \"lucide-react\";\nimport type { Team, Message } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\nexport default function Chat() {\n  const { user, isAuthenticated } = useAuth();\n  const { isConnected, messages: wsMessages, sendMessage, setMessages } = useWebSocket();\n  \n  const [selectedTeam, setSelectedTeam] = useState<Team | null>(null);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const { data: myTeams = [] } = useQuery<Team[]>({\n    queryKey: [\"/api/teams/my\"],\n    enabled: isAuthenticated\n  });\n\n  const { data: teamMessages = [] } = useQuery<Message[]>({\n    queryKey: [\"/api/teams\", selectedTeam?.id, \"messages\"],\n    enabled: !!selectedTeam?.id\n  });\n\n  useEffect(() => {\n    if (teamMessages.length > 0) {\n      setMessages(teamMessages);\n    }\n  }, [teamMessages, setMessages]);\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [wsMessages]);\n\n  if (!isAuthenticated || !user) {\n    return <Link href=\"/\" />;\n  }\n\n  if (!user.isProfileComplete) {\n    return <Link href=\"/profile\" />;\n  }\n\n  const handleSendMessage = () => {\n    if (!selectedTeam || !newMessage.trim()) return;\n    \n    sendMessage(selectedTeam.id, user.id, newMessage.trim());\n    setNewMessage(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const filteredMessages = wsMessages.filter(msg => msg.teamId === selectedTeam?.id);\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex\">\n        {/* Team List */}\n        <div className=\"w-80 border-r border-border bg-card\">\n          <div className=\"p-4 border-b border-border\">\n            <h3 className=\"font-semibold text-foreground flex items-center gap-2\">\n              <MessageCircle className=\"h-5 w-5\" />\n              Team Chats\n            </h3>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              Select a team to start messaging\n            </p>\n          </div>\n          \n          <ScrollArea className=\"h-[calc(100vh-12rem)]\">\n            <div className=\"p-2 space-y-1\">\n              {myTeams.length > 0 ? (\n                myTeams.map((team) => (\n                  <Button\n                    key={team.id}\n                    variant={selectedTeam?.id === team.id ? \"secondary\" : \"ghost\"}\n                    className=\"w-full justify-start h-auto p-3\"\n                    onClick={() => setSelectedTeam(team)}\n                    data-testid={`button-select-team-${team.id}`}\n                  >\n                    <div className=\"flex items-center gap-3 w-full\">\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                        <Users className=\"h-5 w-5 text-primary\" />\n                      </div>\n                      <div className=\"flex-1 text-left\">\n                        <p className=\"font-medium text-sm truncate\">{team.name}</p>\n                        <p className=\"text-xs text-muted-foreground truncate\">\n                          {team.category} • {team.eventName}\n                        </p>\n                      </div>\n                      {/* Unread indicator could go here */}\n                    </div>\n                  </Button>\n                ))\n              ) : (\n                <div className=\"text-center py-8 px-4\">\n                  <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-3\" />\n                  <p className=\"text-sm text-muted-foreground mb-3\">No teams joined yet</p>\n                  <Button size=\"sm\" asChild data-testid=\"button-join-team\">\n                    <Link href=\"/teams\">Join a Team</Link>\n                  </Button>\n                </div>\n              )}\n            </div>\n          </ScrollArea>\n        </div>\n\n        {/* Chat Area */}\n        <div className=\"flex-1 flex flex-col\">\n          {selectedTeam ? (\n            <>\n              {/* Chat Header */}\n              <div className=\"p-4 border-b border-border bg-card\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                      <Users className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold text-foreground\">{selectedTeam.name}</h4>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {selectedTeam.category} • {selectedTeam.eventName}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant={isConnected ? \"default\" : \"destructive\"} className=\"text-xs\">\n                      {isConnected ? \"Connected\" : \"Disconnected\"}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              {/* Messages Area */}\n              <ScrollArea className=\"flex-1 p-4\">\n                <div className=\"space-y-4\">\n                  {filteredMessages.length > 0 ? (\n                    filteredMessages.map((message, index) => (\n                      <div\n                        key={message.id || index}\n                        className={`flex gap-3 ${\n                          message.userId === user.id ? \"flex-row-reverse\" : \"flex-row\"\n                        }`}\n                      >\n                        <Avatar className=\"h-8 w-8\">\n                          <AvatarImage src=\"\" />\n                          <AvatarFallback className=\"text-xs\">\n                            {message.userId === user.id ? \"You\" : \"U\"}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div\n                          className={`max-w-[70%] rounded-lg p-3 ${\n                            message.userId === user.id\n                              ? \"bg-primary text-primary-foreground\"\n                              : \"bg-muted text-foreground\"\n                          }`}\n                        >\n                          <p className=\"text-sm\">{message.content}</p>\n                          <p className=\"text-xs opacity-70 mt-1\">\n                            {message.createdAt ? new Date(message.createdAt).toLocaleTimeString() : \"Now\"}\n                          </p>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <MessageCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-3\" />\n                      <p className=\"text-muted-foreground\">No messages yet</p>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        Start the conversation with your team!\n                      </p>\n                    </div>\n                  )}\n                  <div ref={messagesEndRef} />\n                </div>\n              </ScrollArea>\n\n              {/* Message Input */}\n              <div className=\"p-4 border-t border-border bg-card\">\n                <div className=\"flex gap-2\">\n                  <Input\n                    value={newMessage}\n                    onChange={(e) => setNewMessage(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    placeholder=\"Type your message...\"\n                    disabled={!isConnected}\n                    data-testid=\"input-message\"\n                  />\n                  <Button \n                    onClick={handleSendMessage}\n                    disabled={!newMessage.trim() || !isConnected}\n                    data-testid=\"button-send-message\"\n                  >\n                    <Send className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                {!isConnected && (\n                  <p className=\"text-xs text-muted-foreground mt-2\">\n                    Reconnecting to chat...\n                  </p>\n                )}\n              </div>\n            </>\n          ) : (\n            <div className=\"flex-1 flex items-center justify-center bg-muted/20\">\n              <div className=\"text-center\">\n                <MessageCircle className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Select a team to start chatting</h3>\n                <p className=\"text-muted-foreground\">\n                  Choose a team from the sidebar to view and send messages\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":9508},"client/src/pages/dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TeamCard } from \"@/components/team-card\";\nimport { SkillTag } from \"@/components/skill-tag\";\nimport { \n  Users, \n  UserPlus, \n  Star, \n  Trophy, \n  Bell, \n  Plus,\n  Calendar,\n  Settings,\n  Search,\n  MessageCircle,\n  User\n} from \"lucide-react\";\nimport type { Team, Event } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\nexport default function Dashboard() {\n  const { user, isAuthenticated } = useAuth();\n\n  const { data: teams = [], isLoading: teamsLoading } = useQuery<Team[]>({\n    queryKey: [\"/api/teams\"],\n    enabled: isAuthenticated\n  });\n\n  const { data: myTeams = [] } = useQuery<Team[]>({\n    queryKey: [\"/api/teams/my\"],\n    enabled: isAuthenticated\n  });\n\n  const { data: events = [] } = useQuery<Event[]>({\n    queryKey: [\"/api/events\"],\n    enabled: isAuthenticated\n  });\n\n  if (!isAuthenticated || !user) {\n    return <Link href=\"/\" />;\n  }\n\n  if (!user.isProfileComplete) {\n    return <Link href=\"/profile\" />;\n  }\n\n  const userSkills = Array.isArray(user.skills) ? user.skills : [];\n  const upcomingEvents = events.slice(0, 3);\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-y-auto\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Dashboard</h2>\n              <p className=\"text-muted-foreground\">Welcome back! Find your perfect team for upcoming hackathons.</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"button-notifications\">\n                <Bell className=\"h-5 w-5\" />\n                <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-destructive text-destructive-foreground text-xs rounded-full flex items-center justify-center\">\n                  3\n                </span>\n              </Button>\n              <Button className=\"bg-primary text-primary-foreground\" data-testid=\"button-create-team\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Create Team\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"p-6 space-y-6\">\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Active Projects</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{myTeams.length}</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <Users className=\"text-primary text-xl\" />\n                  </div>\n                </div>\n                <p className=\"text-xs text-accent mt-2\">\n                  <span className=\"text-accent\">↗</span> Great progress!\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Team Requests</p>\n                    <p className=\"text-2xl font-bold text-foreground\">0</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                    <UserPlus className=\"text-accent text-xl\" />\n                  </div>\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  No pending requests\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Match Score</p>\n                    <p className=\"text-2xl font-bold text-foreground\">94%</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-3/10 rounded-lg flex items-center justify-center\">\n                    <Star className=\"text-chart-3 text-xl\" />\n                  </div>\n                </div>\n                <p className=\"text-xs text-accent mt-2\">\n                  Excellent compatibility\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Hackathons</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{events.length}</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-4/10 rounded-lg flex items-center justify-center\">\n                    <Trophy className=\"text-chart-4 text-xl\" />\n                  </div>\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  {upcomingEvents.length} upcoming events\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Recommended Teams */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader className=\"border-b border-border\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg\">Recommended Teams</CardTitle>\n                      <CardDescription>Based on your skills and interests</CardDescription>\n                    </div>\n                    <Button variant=\"ghost\" asChild data-testid=\"link-view-all-teams\">\n                      <Link href=\"/teams\">View All</Link>\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  {teamsLoading ? (\n                    <div className=\"space-y-4\">\n                      {[1, 2, 3].map((i) => (\n                        <div key={i} className=\"animate-pulse\">\n                          <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n                          <div className=\"h-3 bg-muted rounded w-1/2 mb-3\"></div>\n                          <div className=\"flex gap-2\">\n                            <div className=\"h-6 bg-muted rounded w-16\"></div>\n                            <div className=\"h-6 bg-muted rounded w-20\"></div>\n                            <div className=\"h-6 bg-muted rounded w-14\"></div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : teams.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {teams.slice(0, 3).map((team) => (\n                        <TeamCard \n                          key={team.id} \n                          team={team} \n                          showJoinButton={false}\n                        />\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\">No recommended teams found</p>\n                      <Button asChild className=\"mt-4\" data-testid=\"button-explore-teams\">\n                        <Link href=\"/teams\">Explore Teams</Link>\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Sidebar Widgets */}\n            <div className=\"space-y-6\">\n              {/* Upcoming Events */}\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base\">Upcoming Events</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {upcomingEvents.length > 0 ? (\n                    upcomingEvents.map((event) => (\n                      <div key={event.id} className=\"flex items-start space-x-3\">\n                        <div className=\"w-2 h-2 bg-primary rounded-full mt-2 flex-shrink-0\"></div>\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-sm font-medium text-foreground truncate\">{event.name}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {new Date(event.startDate).toLocaleDateString()} • {event.category}\n                          </p>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-sm text-muted-foreground\">No upcoming events</p>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Your Skills */}\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-base\">Your Skills</CardTitle>\n                    <Button variant=\"ghost\" size=\"sm\" asChild data-testid=\"link-edit-skills\">\n                      <Link href=\"/profile\">Edit</Link>\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {userSkills.length > 0 ? (\n                    <div className=\"space-y-3\">\n                      {userSkills.slice(0, 4).map((skill: any, index: number) => (\n                        <div key={index}>\n                          <div className=\"flex justify-between text-sm mb-1\">\n                            <span className=\"text-foreground\">{skill.name}</span>\n                            <span className=\"text-muted-foreground\">{skill.level}%</span>\n                          </div>\n                          <div className=\"w-full bg-muted rounded-full h-2\">\n                            <div \n                              className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n                              style={{ width: `${skill.level}%` }}\n                            ></div>\n                          </div>\n                        </div>\n                      ))}\n                      <Button variant=\"outline\" size=\"sm\" className=\"w-full mt-4\" asChild>\n                        <Link href=\"/profile\">\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add New Skill\n                        </Link>\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-4\">\n                      <p className=\"text-sm text-muted-foreground mb-3\">No skills added yet</p>\n                      <Button size=\"sm\" asChild data-testid=\"button-add-skills\">\n                        <Link href=\"/profile\">Add Skills</Link>\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Quick Actions */}\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-base\">Quick Actions</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <Button variant=\"ghost\" className=\"w-full justify-start\" asChild data-testid=\"button-find-teammates\">\n                    <Link href=\"/teams\">\n                      <Search className=\"mr-2 h-4 w-4\" />\n                      Find Teammates\n                    </Link>\n                  </Button>\n                  <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"button-create-project\">\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Create Project\n                  </Button>\n                  <Button variant=\"ghost\" className=\"w-full justify-start\" asChild data-testid=\"button-view-events\">\n                    <Link href=\"/events\">\n                      <Calendar className=\"mr-2 h-4 w-4\" />\n                      View Events\n                    </Link>\n                  </Button>\n                  <Button variant=\"ghost\" className=\"w-full justify-start\" asChild data-testid=\"button-settings\">\n                    <Link href=\"/profile\">\n                      <Settings className=\"mr-2 h-4 w-4\" />\n                      Settings\n                    </Link>\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Recent Activity */}\n          <Card>\n            <CardHeader className=\"border-b border-border\">\n              <CardTitle className=\"text-lg\">Recent Activity</CardTitle>\n              <CardDescription>Stay updated with your team interactions</CardDescription>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              <div className=\"text-center py-8\">\n                <MessageCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">No recent activity</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Join a team or create a project to see activity here\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":14319},"client/src/pages/events.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar, Clock, MapPin, Users, Trophy, Search, Filter, ExternalLink } from \"lucide-react\";\nimport type { Event } from \"@shared/schema\";\nimport { Link } from \"wouter\";\nimport { useState } from \"react\";\n\nconst EVENT_CATEGORIES = [\n  { value: \"all\", label: \"All Events\" },\n  { value: \"hackathon\", label: \"Hackathons\" },\n  { value: \"competition\", label: \"Competitions\" },\n  { value: \"research\", label: \"Research Events\" },\n  { value: \"symposium\", label: \"Symposiums\" }\n];\n\nexport default function Events() {\n  const { user, isAuthenticated } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n\n  const { data: events = [], isLoading } = useQuery<Event[]>({\n    queryKey: [\"/api/events\"],\n    enabled: isAuthenticated\n  });\n\n  if (!isAuthenticated || !user) {\n    return <Link href=\"/\" />;\n  }\n\n  if (!user.isProfileComplete) {\n    return <Link href=\"/profile\" />;\n  }\n\n  const filteredEvents = events.filter(event => {\n    const matchesSearch = event.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         event.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || event.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const upcomingEvents = filteredEvents.filter(event => new Date(event.startDate) > new Date());\n  const pastEvents = filteredEvents.filter(event => new Date(event.startDate) <= new Date());\n\n  const formatDate = (dateString: string | Date) => {\n    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n  };\n\n  const formatTime = (dateString: string | Date) => {\n    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;\n    return date.toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  const getDaysUntil = (dateString: string | Date) => {\n    const targetDate = typeof dateString === 'string' ? new Date(dateString) : dateString;\n    const days = Math.ceil((targetDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n    return days;\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'hackathon': return 'bg-primary/10 text-primary';\n      case 'competition': return 'bg-accent/10 text-accent';\n      case 'research': return 'bg-chart-3/10 text-chart-3';\n      case 'symposium': return 'bg-chart-4/10 text-chart-4';\n      default: return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-y-auto\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Events & Competitions</h2>\n              <p className=\"text-muted-foreground\">Discover hackathons, competitions, and academic events</p>\n            </div>\n            <Button className=\"bg-primary text-primary-foreground\" data-testid=\"button-create-event\">\n              <Calendar className=\"mr-2 h-4 w-4\" />\n              Create Event\n            </Button>\n          </div>\n        </header>\n\n        <div className=\"p-6 space-y-6\">\n          {/* Filters */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Filter className=\"h-5 w-5\" />\n                Filters\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <div className=\"flex-1\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search events...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-search-events\"\n                    />\n                  </div>\n                </div>\n                <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-event-category\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {EVENT_CATEGORIES.map((category) => (\n                      <SelectItem key={category.value} value={category.value}>\n                        {category.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Featured Upcoming Events */}\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-xl font-semibold\">\n                Upcoming Events\n                <Badge variant=\"secondary\" className=\"ml-2\">\n                  {upcomingEvents.length}\n                </Badge>\n              </h3>\n            </div>\n\n            {isLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[1, 2, 3, 4, 5, 6].map((i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <CardHeader>\n                      <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                      <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"h-3 bg-muted rounded\"></div>\n                        <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : upcomingEvents.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {upcomingEvents.map((event) => {\n                  const daysUntil = getDaysUntil(event.startDate);\n                  const isRegistrationOpen = event.registrationDeadline ? \n                    new Date(event.registrationDeadline) > new Date() : true;\n\n                  return (\n                    <Card key={event.id} className=\"hover:shadow-lg transition-all duration-200 hover:border-primary/30\">\n                      <CardHeader>\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <h4 className=\"font-semibold text-foreground text-lg line-clamp-1\">{event.name}</h4>\n                              <Badge className={getCategoryColor(event.category || '')}>\n                                {event.category}\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n                              {event.description || \"No description available\"}\n                            </p>\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"pt-0\">\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                            <Calendar className=\"h-4 w-4\" />\n                            <span>{formatDate(event.startDate)} - {formatDate(event.endDate)}</span>\n                          </div>\n                          \n                          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                            <Clock className=\"h-4 w-4\" />\n                            <span>Starts at {formatTime(event.startDate)}</span>\n                          </div>\n\n                          {event.organizer && (\n                            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                              <Users className=\"h-4 w-4\" />\n                              <span>by {event.organizer}</span>\n                            </div>\n                          )}\n\n                          {event.registrationDeadline && (\n                            <div className=\"flex items-center gap-2 text-sm\">\n                              <Trophy className=\"h-4 w-4\" />\n                              <span className={isRegistrationOpen ? \"text-accent\" : \"text-destructive\"}>\n                                Registration {isRegistrationOpen ? \n                                  `until ${formatDate(event.registrationDeadline)}` : \n                                  \"closed\"\n                                }\n                              </span>\n                            </div>\n                          )}\n\n                          {daysUntil > 0 && (\n                            <Badge variant={daysUntil <= 7 ? \"destructive\" : \"secondary\"} className=\"w-fit\">\n                              {daysUntil === 1 ? \"Tomorrow\" : `${daysUntil} days to go`}\n                            </Badge>\n                          )}\n\n                          <div className=\"flex gap-2 pt-2\">\n                            <Button \n                              size=\"sm\" \n                              className=\"flex-1\"\n                              disabled={!isRegistrationOpen}\n                              data-testid={`button-register-${event.id}`}\n                            >\n                              {isRegistrationOpen ? \"Register Now\" : \"Registration Closed\"}\n                            </Button>\n                            {event.website && (\n                              <Button variant=\"outline\" size=\"sm\" asChild>\n                                <a href={event.website} target=\"_blank\" rel=\"noopener noreferrer\">\n                                  <ExternalLink className=\"h-4 w-4\" />\n                                </a>\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <Calendar className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No upcoming events found</h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    {searchTerm || selectedCategory !== \"all\" \n                      ? \"Try adjusting your search or filters\"\n                      : \"Check back later for new events and competitions!\"\n                    }\n                  </p>\n                  {(searchTerm || selectedCategory !== \"all\") && (\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => {\n                        setSearchTerm(\"\");\n                        setSelectedCategory(\"all\");\n                      }}\n                      data-testid=\"button-clear-event-filters\"\n                    >\n                      Clear Filters\n                    </Button>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Past Events */}\n          {pastEvents.length > 0 && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-xl font-semibold\">\n                  Past Events\n                  <Badge variant=\"outline\" className=\"ml-2\">\n                    {pastEvents.length}\n                  </Badge>\n                </h3>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {pastEvents.slice(0, 6).map((event) => (\n                  <Card key={event.id} className=\"opacity-75 hover:opacity-100 transition-opacity\">\n                    <CardHeader>\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <h4 className=\"font-semibold text-foreground text-lg line-clamp-1\">{event.name}</h4>\n                        <Badge variant=\"outline\" className={getCategoryColor(event.category || '')}>\n                          {event.category}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                        {event.description || \"No description available\"}\n                      </p>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-2\">\n                        <Calendar className=\"h-4 w-4\" />\n                        <span>{formatDate(event.startDate)}</span>\n                      </div>\n                      {event.organizer && (\n                        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                          <Users className=\"h-4 w-4\" />\n                          <span>{event.organizer}</span>\n                        </div>\n                      )}\n                      <Badge variant=\"secondary\" className=\"mt-3\">\n                        Completed\n                      </Badge>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":14566},"client/src/pages/landing.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, Trophy, Zap, Shield, Star, Github, Linkedin } from \"lucide-react\";\nimport { GOOGLE_AUTH_URL } from \"@/lib/auth\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Link } from \"wouter\";\n\nexport default function Landing() {\n  const { isAuthenticated, user } = useAuth();\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  useEffect(() => {\n    setIsAnimating(true);\n  }, []);\n\n  if (isAuthenticated && user) {\n    if (!user.isProfileComplete) {\n      return <Link href=\"/profile\" />;\n    } else {\n      return <Link href=\"/dashboard\" />;\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-primary/5\">\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-grid-pattern opacity-5\" />\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-20 pb-16\">\n          <div className=\"text-center\">\n            <div className=\"flex justify-center mb-8\">\n              <Badge variant=\"secondary\" className=\"px-4 py-2 text-sm\">\n                Built for Digital Dawn Hackathon 🏆 Code2Create ASM VIT Vellore\n              </Badge>\n            </div>\n            \n            <h1 \n              className={`text-4xl md:text-6xl font-bold text-foreground mb-6 transition-all duration-1000 ${\n                isAnimating ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'\n              }`}\n            >\n              Find Your Perfect\n              <span className=\"bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                {\" \"}Team Mate\n              </span>\n            </h1>\n            \n            <p \n              className={`text-xl text-muted-foreground mb-8 max-w-3xl mx-auto transition-all duration-1000 delay-200 ${\n                isAnimating ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'\n              }`}\n            >\n              TeamSync Edu is a specialized educational team formation platform designed to revolutionize \n              how students at Indian technical universities collaborate for hackathons, competitions, and academic projects.\n            </p>\n            \n            <div \n              className={`flex flex-col sm:flex-row gap-4 justify-center items-center transition-all duration-1000 delay-400 ${\n                isAnimating ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'\n              }`}\n            >\n              <Button size=\"lg\" asChild className=\"bg-primary hover:bg-primary/90 text-lg px-8 py-6\">\n                <a href={GOOGLE_AUTH_URL} data-testid=\"button-get-started\">\n                  <Users className=\"mr-2 h-5 w-5\" />\n                  Get Started with Google\n                </a>\n              </Button>\n              <p className=\"text-sm text-muted-foreground\">\n                🎓 Only for University Students (no gmail.com accounts)\n              </p>\n            </div>\n          </div>\n\n          {/* Floating Team Cards Animation */}\n          <div className=\"mt-16 relative\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto\">\n              {[\n                { \n                  name: \"AI-Powered EdTech Team\", \n                  match: \"95%\", \n                  skills: [\"React\", \"Python\", \"ML\", \"UI/UX\"],\n                  event: \"Smart India Hackathon\"\n                },\n                { \n                  name: \"Blockchain Fintech Innovators\", \n                  match: \"87%\", \n                  skills: [\"Solidity\", \"Node.js\", \"Crypto\", \"Backend\"],\n                  event: \"NASSCOM Hackathon\"\n                },\n                { \n                  name: \"Green Energy IoT Solutions\", \n                  match: \"79%\", \n                  skills: [\"Arduino\", \"C++\", \"IoT\", \"Data Analysis\"],\n                  event: \"Climate Change Hackathon\"\n                }\n              ].map((team, index) => (\n                <Card \n                  key={team.name}\n                  className={`hover:shadow-lg transition-all duration-500 delay-${600 + index * 200} ${\n                    isAnimating ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'\n                  }`}\n                >\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg\">{team.name}</CardTitle>\n                      <Badge className=\"bg-accent text-accent-foreground\">{team.match} Match</Badge>\n                    </div>\n                    <CardDescription className=\"text-sm\">{team.event}</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {team.skills.map((skill) => (\n                        <Badge key={skill} variant=\"outline\" className=\"text-xs\">\n                          {skill}\n                        </Badge>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 bg-card/50 backdrop-blur-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n              Why Choose TeamSync Edu?\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">\n              Built specifically for Indian technical universities with institutional security\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[\n              {\n                icon: Shield,\n                title: \"Institutional Security\",\n                description: \"Google Workspace authentication ensures only verified university students can join\"\n              },\n              {\n                icon: Zap,\n                title: \"Smart Matching\",\n                description: \"AI-driven algorithm matches you with teammates based on complementary skills and interests\"\n              },\n              {\n                icon: Trophy,\n                title: \"Competition Focus\",\n                description: \"Specialized for hackathons, coding competitions, and academic project collaboration\"\n              },\n              {\n                icon: Users,\n                title: \"Team Formation\",\n                description: \"Easy team creation, member approval system, and real-time collaboration tools\"\n              },\n              {\n                icon: Star,\n                title: \"Skill Profiles\",\n                description: \"Comprehensive profiles with technical skills, project portfolios, and achievements\"\n              },\n              {\n                icon: Users,\n                title: \"Real-time Chat\",\n                description: \"Built-in team communication with project management and file sharing\"\n              }\n            ].map((feature, index) => {\n              const Icon = feature.icon;\n              return (\n                <Card key={feature.title} className=\"text-center hover:shadow-md transition-shadow\">\n                  <CardHeader>\n                    <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                      <Icon className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <CardTitle className=\"text-xl\">{feature.title}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <CardDescription className=\"text-base\">\n                      {feature.description}\n                    </CardDescription>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n            Ready to Find Your Dream Team?\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            Join thousands of students from VIT, NIT, and other premier institutions\n          </p>\n          <Button size=\"lg\" asChild className=\"bg-primary hover:bg-primary/90 text-lg px-8 py-6\">\n            <a href={GOOGLE_AUTH_URL} data-testid=\"button-join-now\">\n              Join TeamSync Edu Now\n            </a>\n          </Button>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-card border-t border-border py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center space-x-3 mb-4\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Users className=\"text-primary-foreground text-sm\" />\n              </div>\n              <h3 className=\"text-lg font-bold text-foreground\">TeamSync Edu</h3>\n            </div>\n            <p className=\"text-muted-foreground mb-6\">\n              Made with ❤️ by <strong>Team N00B</strong> for Digital Dawn Hackathon\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              Code2Create ASM VIT Vellore Chapter • Empowering Student Collaboration\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":9831},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { ProfileForm } from \"@/components/profile-form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useLocation } from \"wouter\";\nimport { Sidebar } from \"@/components/sidebar\";\n\nexport default function Profile() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const handleProfileSubmit = () => {\n    setLocation(\"/dashboard\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">\n                {user.isProfileComplete ? \"Edit Profile\" : \"Complete Your Profile\"}\n              </CardTitle>\n              <p className=\"text-muted-foreground\">\n                {user.isProfileComplete \n                  ? \"Update your information and skills to improve team matching\"\n                  : \"Please complete your profile to start finding and joining teams\"\n                }\n              </p>\n            </CardHeader>\n            <CardContent>\n              <ProfileForm \n                onSubmit={handleProfileSubmit}\n                isLoading={false}\n              />\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":1818},"client/src/pages/projects.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Users, \n  Calendar, \n  Clock, \n  Trophy, \n  Plus,\n  MessageCircle,\n  Settings,\n  ExternalLink,\n  GitBranch,\n  Target\n} from \"lucide-react\";\nimport type { Team, TeamMember } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\nexport default function Projects() {\n  const { user, isAuthenticated } = useAuth();\n\n  const { data: myTeams = [], isLoading } = useQuery<Team[]>({\n    queryKey: [\"/api/teams/my\"],\n    enabled: isAuthenticated\n  });\n\n  if (!isAuthenticated || !user) {\n    return <Link href=\"/\" />;\n  }\n\n  if (!user.isProfileComplete) {\n    return <Link href=\"/profile\" />;\n  }\n\n  const getProjectStatus = (team: Team) => {\n    if (!team.deadline) return \"ongoing\";\n    const now = new Date();\n    const deadline = new Date(team.deadline);\n    const daysLeft = Math.ceil((deadline.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    \n    if (daysLeft < 0) return \"completed\";\n    if (daysLeft <= 7) return \"urgent\";\n    return \"ongoing\";\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\": return \"bg-muted text-muted-foreground\";\n      case \"urgent\": return \"bg-destructive text-destructive-foreground\";\n      case \"ongoing\": return \"bg-accent text-accent-foreground\";\n      default: return \"bg-secondary text-secondary-foreground\";\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case \"completed\": return \"Completed\";\n      case \"urgent\": return \"Due Soon\";\n      case \"ongoing\": return \"In Progress\";\n      default: return \"Unknown\";\n    }\n  };\n\n  const calculateProgress = (team: Team) => {\n    if (!team.deadline) return 25; // Default progress for ongoing projects\n    const start = new Date(team.createdAt || Date.now());\n    const end = new Date(team.deadline);\n    const now = new Date();\n    \n    const total = end.getTime() - start.getTime();\n    const elapsed = now.getTime() - start.getTime();\n    \n    return Math.min(100, Math.max(0, (elapsed / total) * 100));\n  };\n\n  const formatDeadline = (dateString: string | Date) => {\n    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n  };\n\n  const getDaysLeft = (dateString: string | Date) => {\n    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;\n    const days = Math.ceil((date.getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n    return Math.max(0, days);\n  };\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-y-auto\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">My Projects</h2>\n              <p className=\"text-muted-foreground\">Manage your team projects and collaborations</p>\n            </div>\n            <Button className=\"bg-primary text-primary-foreground\" data-testid=\"button-create-project\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Project\n            </Button>\n          </div>\n        </header>\n\n        <div className=\"p-6 space-y-6\">\n          {/* Project Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Active Projects</p>\n                    <p className=\"text-2xl font-bold text-foreground\">\n                      {myTeams.filter(team => getProjectStatus(team) !== \"completed\").length}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <GitBranch className=\"text-primary text-xl\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Completed</p>\n                    <p className=\"text-2xl font-bold text-foreground\">\n                      {myTeams.filter(team => getProjectStatus(team) === \"completed\").length}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                    <Trophy className=\"text-accent text-xl\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Due Soon</p>\n                    <p className=\"text-2xl font-bold text-foreground\">\n                      {myTeams.filter(team => getProjectStatus(team) === \"urgent\").length}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-4/10 rounded-lg flex items-center justify-center\">\n                    <Clock className=\"text-chart-4 text-xl\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Team Role</p>\n                    <p className=\"text-2xl font-bold text-foreground\">\n                      {myTeams.filter(team => team.leaderId === user.id).length}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-chart-3/10 rounded-lg flex items-center justify-center\">\n                    <Users className=\"text-chart-3 text-xl\" />\n                  </div>\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  Leading teams\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Projects List */}\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-xl font-semibold\">\n                All Projects\n                <Badge variant=\"secondary\" className=\"ml-2\">\n                  {myTeams.length}\n                </Badge>\n              </h3>\n            </div>\n\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3].map((i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <CardHeader>\n                      <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                      <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"h-3 bg-muted rounded\"></div>\n                        <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : myTeams.length > 0 ? (\n              <div className=\"space-y-4\">\n                {myTeams.map((team) => {\n                  const status = getProjectStatus(team);\n                  const progress = calculateProgress(team);\n                  const isLeader = team.leaderId === user.id;\n                  const daysLeft = team.deadline ? getDaysLeft(team.deadline) : null;\n\n                  return (\n                    <Card key={team.id} className=\"hover:shadow-md transition-shadow\">\n                      <CardHeader>\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center gap-3 mb-2\">\n                              <h4 className=\"font-semibold text-foreground text-lg\">{team.name}</h4>\n                              <Badge className={getStatusColor(status)}>\n                                {getStatusLabel(status)}\n                              </Badge>\n                              {isLeader && (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  Team Leader\n                                </Badge>\n                              )}\n                            </div>\n                            <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n                              {team.description || \"No description provided\"}\n                            </p>\n                            \n                            <div className=\"flex items-center gap-6 text-sm text-muted-foreground\">\n                              <span className=\"flex items-center gap-1\">\n                                <Users className=\"h-4 w-4\" />\n                                {/* Mock member count - would be from team members relation */}\n                                3/{team.maxMembers} Members\n                              </span>\n                              \n                              {team.category && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Target className=\"h-4 w-4\" />\n                                  {team.category}\n                                </span>\n                              )}\n                              \n                              {team.eventName && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Trophy className=\"h-4 w-4\" />\n                                  {team.eventName}\n                                </span>\n                              )}\n                              \n                              {team.deadline && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Calendar className=\"h-4 w-4\" />\n                                  Due {formatDeadline(team.deadline)}\n                                  {daysLeft !== null && daysLeft > 0 && (\n                                    <span className={`ml-1 ${daysLeft <= 7 ? 'text-destructive' : 'text-muted-foreground'}`}>\n                                      ({daysLeft} days left)\n                                    </span>\n                                  )}\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center gap-2\">\n                            <Button variant=\"outline\" size=\"sm\" asChild data-testid={`button-chat-${team.id}`}>\n                              <Link href=\"/chat\">\n                                <MessageCircle className=\"h-4 w-4 mr-2\" />\n                                Chat\n                              </Link>\n                            </Button>\n                            {isLeader && (\n                              <Button variant=\"outline\" size=\"sm\" data-testid={`button-manage-${team.id}`}>\n                                <Settings className=\"h-4 w-4 mr-2\" />\n                                Manage\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                      </CardHeader>\n                      \n                      <CardContent className=\"pt-0\">\n                        <div className=\"space-y-4\">\n                          {/* Progress Bar */}\n                          <div>\n                            <div className=\"flex justify-between text-sm mb-2\">\n                              <span className=\"text-muted-foreground\">Progress</span>\n                              <span className=\"text-foreground font-medium\">{Math.round(progress)}%</span>\n                            </div>\n                            <Progress value={progress} className=\"h-2\" />\n                          </div>\n\n                          {/* Required Skills */}\n                          {team.requiredSkills && Array.isArray(team.requiredSkills) && (\n                            <div>\n                              <p className=\"text-sm font-medium text-foreground mb-2\">Required Skills</p>\n                              <div className=\"flex flex-wrap gap-2\">\n                                {team.requiredSkills.slice(0, 5).map((skill: string, index: number) => (\n                                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                                    {skill}\n                                  </Badge>\n                                ))}\n                                {team.requiredSkills.length > 5 && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    +{team.requiredSkills.length - 5} more\n                                  </Badge>\n                                )}\n                              </div>\n                            </div>\n                          )}\n\n                          {/* Team Members Preview */}\n                          <div>\n                            <p className=\"text-sm font-medium text-foreground mb-2\">Team Members</p>\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"flex -space-x-2\">\n                                {/* Mock avatars - would be from actual team members */}\n                                {[1, 2, 3].map((i) => (\n                                  <Avatar key={i} className=\"h-8 w-8 border-2 border-card\">\n                                    <AvatarFallback className=\"text-xs\">M{i}</AvatarFallback>\n                                  </Avatar>\n                                ))}\n                              </div>\n                              <span className=\"text-sm text-muted-foreground ml-2\">\n                                and {Math.max(0, (team.maxMembers || 4) - 3)} others\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <GitBranch className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No projects yet</h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    Create your first project or join an existing team to get started\n                  </p>\n                  <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                    <Button data-testid=\"button-create-first-project\">\n                      <Plus className=\"mr-2 h-4 w-4\" />\n                      Create Project\n                    </Button>\n                    <Button variant=\"outline\" asChild data-testid=\"button-join-existing-team\">\n                      <Link href=\"/teams\">\n                        <Users className=\"mr-2 h-4 w-4\" />\n                        Join Team\n                      </Link>\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":16365},"client/src/pages/teams.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Sidebar } from \"@/components/sidebar\";\nimport { TeamCard } from \"@/components/team-card\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Search, Filter, Users, Plus } from \"lucide-react\";\nimport type { Team } from \"@shared/schema\";\nimport { Link } from \"wouter\";\n\nconst CATEGORIES = [\n  { value: \"all\", label: \"All Categories\" },\n  { value: \"hackathon\", label: \"Hackathons\" },\n  { value: \"competition\", label: \"Competitions\" },\n  { value: \"research\", label: \"Research Projects\" },\n  { value: \"symposium\", label: \"Symposiums\" }\n];\n\nexport default function Teams() {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n\n  const { data: teams = [], isLoading } = useQuery<Team[]>({\n    queryKey: [\"/api/teams\", selectedCategory === \"all\" ? undefined : selectedCategory],\n    enabled: isAuthenticated\n  });\n\n  const joinTeamMutation = useMutation({\n    mutationFn: ({ teamId, message }: { teamId: string; message: string }) =>\n      apiRequest(\"POST\", `/api/teams/${teamId}/join`, { message }),\n    onSuccess: () => {\n      toast({\n        title: \"Request sent!\",\n        description: \"Your request to join the team has been sent to the team leader.\"\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/teams\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  if (!isAuthenticated || !user) {\n    return <Link href=\"/\" />;\n  }\n\n  if (!user.isProfileComplete) {\n    return <Link href=\"/profile\" />;\n  }\n\n  const filteredTeams = teams.filter(team =>\n    team.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    team.description?.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleJoinTeam = (teamId: string) => {\n    joinTeamMutation.mutate({\n      teamId,\n      message: \"Hi! I'm interested in joining your team. I believe my skills would be a great fit for your project.\"\n    });\n  };\n\n  return (\n    <div className=\"flex h-screen\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-y-auto\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\">Find Teams</h2>\n              <p className=\"text-muted-foreground\">Discover teams that match your skills and interests</p>\n            </div>\n            <Button className=\"bg-primary text-primary-foreground\" data-testid=\"button-create-team\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Team\n            </Button>\n          </div>\n        </header>\n\n        <div className=\"p-6 space-y-6\">\n          {/* Filters */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Filter className=\"h-5 w-5\" />\n                Filters\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <div className=\"flex-1\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search teams...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-search-teams\"\n                    />\n                  </div>\n                </div>\n                <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-category\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {CATEGORIES.map((category) => (\n                      <SelectItem key={category.value} value={category.value}>\n                        {category.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Teams Grid */}\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-xl font-semibold\">\n                Available Teams\n                <Badge variant=\"secondary\" className=\"ml-2\">\n                  {filteredTeams.length}\n                </Badge>\n              </h3>\n            </div>\n\n            {isLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[1, 2, 3, 4, 5, 6].map((i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <CardHeader>\n                      <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                      <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"h-3 bg-muted rounded\"></div>\n                        <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                        <div className=\"flex gap-2 mt-3\">\n                          <div className=\"h-6 bg-muted rounded w-16\"></div>\n                          <div className=\"h-6 bg-muted rounded w-20\"></div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : filteredTeams.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredTeams.map((team) => (\n                  <TeamCard\n                    key={team.id}\n                    team={team}\n                    onJoin={handleJoinTeam}\n                    showJoinButton={team.leaderId !== user.id}\n                  />\n                ))}\n              </div>\n            ) : (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <Users className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No teams found</h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    {searchTerm || selectedCategory !== \"all\" \n                      ? \"Try adjusting your search or filters\"\n                      : \"Be the first to create a team for your next project!\"\n                    }\n                  </p>\n                  <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                    {(searchTerm || selectedCategory !== \"all\") && (\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => {\n                          setSearchTerm(\"\");\n                          setSelectedCategory(\"all\");\n                        }}\n                        data-testid=\"button-clear-filters\"\n                      >\n                        Clear Filters\n                      </Button>\n                    )}\n                    <Button data-testid=\"button-create-first-team\">\n                      <Plus className=\"mr-2 h-4 w-4\" />\n                      Create Team\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":8365},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}